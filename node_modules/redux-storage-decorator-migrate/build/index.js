'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var buildMigrationEngine = exports.buildMigrationEngine = function buildMigrationEngine(currentVersion, key, migrations) {
  return function (state) {
    var fromVersion = state && state[key] || 0;
    var migratedState = state;

    var migrationsToApply = migrations.filter(function (migration) {
      return migration.version > fromVersion && migration.version <= currentVersion;
    }).sort(function (m1, m2) {
      return m2.version < m1.version;
    }).map(function (m) {
      return m.migration;
    });

    migrationsToApply.forEach(function (migration) {
      // Do nothing if migration returns nothing. Good for experiments.
      // Migration isn't applied until it returns something.
      migratedState = migration(migratedState) || migratedState;
    });

    // Version doesn't belong to app state, it's meta property.
    // Otherwise combineReducers would complain about missing reducer.
    delete migratedState[key];
    return migratedState;
  };
};

exports.default = function (engine) {
  var currentVersion = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
  var key = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'redux-storage-decorators-migrate-version';
  var migrations = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : [];
  var migrationEngine = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : buildMigrationEngine(currentVersion, key, migrations);

  return _extends({}, engine, {
    load: function load() {
      return engine.load().then(migrationEngine);
    },
    save: function save(state) {
      return engine.save(_extends({}, state, _defineProperty({}, key, currentVersion)));
    },
    addMigration: function addMigration(version, migration) {
      migrations.push({ version: version, migration: migration });
    }
  });
};